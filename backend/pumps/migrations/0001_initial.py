# Generated by Django 5.0.6 on 2024-07-07 21:00

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="BearingList",
            fields=[
                ("rotation_de_id", models.AutoField(primary_key=True, serialize=False)),
                ("rotation", models.TextField()),
            ],
            options={
                "db_table": "tbl_bearing_lov",
            },
        ),
        migrations.CreateModel(
            name="CasingMaterialList",
            fields=[
                ("mat_cover_id", models.AutoField(primary_key=True, serialize=False)),
                ("mat_cover_name", models.TextField()),
                ("mat_cover_type", models.TextField()),
            ],
            options={
                "db_table": "tbl_cover_mat_lov",
            },
        ),
        migrations.CreateModel(
            name="FaceMaterialDetail",
            fields=[
                ("mat_face_id", models.AutoField(primary_key=True, serialize=False)),
                ("mat_face_name", models.TextField()),
                ("mat_face_type", models.TextField()),
            ],
            options={
                "db_table": "tbl_face_mat_lov",
            },
        ),
        migrations.CreateModel(
            name="FlangRatingList",
            fields=[
                (
                    "flang_rating_id",
                    models.AutoField(primary_key=True, serialize=False),
                ),
                ("flang_rating_name", models.TextField()),
            ],
            options={
                "db_table": "tbl_flang_rating_lov",
            },
        ),
        migrations.CreateModel(
            name="ImpellerList",
            fields=[
                (
                    "lmpeller_type_id",
                    models.AutoField(primary_key=True, serialize=False),
                ),
                ("lmpeller_type_name", models.TextField()),
            ],
            options={
                "db_table": "tbl_impeller_type_lov",
            },
        ),
        migrations.CreateModel(
            name="MechanicalDesignList",
            fields=[
                ("mech_design_id", models.AutoField(primary_key=True, serialize=False)),
                ("mech_design_name", models.TextField()),
            ],
            options={
                "db_table": "tbl_mech_design_lov",
            },
        ),
        migrations.CreateModel(
            name="MechSealApiPlanList",
            fields=[
                ("mech_api_id", models.AutoField(primary_key=True, serialize=False)),
                ("mech_api_plan", models.CharField(max_length=25)),
            ],
            options={
                "db_table": "tbl_api_lov",
            },
        ),
        migrations.CreateModel(
            name="MotorDetailList",
            fields=[
                ("motor_drive_id", models.AutoField(primary_key=True, serialize=False)),
                (
                    "drive_system",
                    models.CharField(blank=True, max_length=30, null=True),
                ),
                ("ie_class", models.CharField(blank=True, max_length=30, null=True)),
                ("standard", models.CharField(blank=True, max_length=30, null=True)),
            ],
            options={
                "db_table": "tbl_motor_detail_lov",
            },
        ),
        migrations.CreateModel(
            name="PumpDetailList",
            fields=[
                ("pump_id", models.AutoField(primary_key=True, serialize=False)),
                ("pump_design", models.TextField()),
                ("pump_type", models.TextField()),
            ],
            options={
                "db_table": "tbl_pump_detail_lov",
            },
        ),
        migrations.CreateModel(
            name="PumpStandardList",
            fields=[
                (
                    "pump_standard_id",
                    models.AutoField(primary_key=True, serialize=False),
                ),
                ("name", models.CharField(max_length=255)),
            ],
            options={
                "db_table": "tbl_pump_standard_lov",
            },
        ),
        migrations.CreateModel(
            name="SpringMaterialDetail",
            fields=[
                ("mat_spring_id", models.AutoField(primary_key=True, serialize=False)),
                ("mat_spring_name", models.TextField()),
                ("mat_spring_type", models.TextField()),
            ],
            options={
                "db_table": "tbl_spring_mat_lov",
            },
        ),
        migrations.CreateModel(
            name="SuctionDischargeDetailList",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("suction_discharge_value", models.TextField()),
            ],
            options={
                "db_table": "tbl_suction_discharge_lov",
            },
        ),
        migrations.CreateModel(
            name="SuctionPipeInfoList",
            fields=[
                ("pipe_lov_id", models.AutoField(primary_key=True, serialize=False)),
                ("pipe_sch", models.TextField()),
                ("pipe_size", models.TextField()),
                ("pipe_id", models.TextField()),
                ("fac_number", models.CharField(max_length=20)),
                ("equipment", models.CharField(max_length=50)),
                ("brand", models.CharField(max_length=50)),
                ("short_model", models.CharField(max_length=50)),
                ("model", models.CharField(max_length=50)),
                ("data_type", models.CharField(max_length=10)),
                ("sequence", models.IntegerField()),
                ("rpm", models.IntegerField()),
                ("imp_dia", models.DecimalField(decimal_places=0, max_digits=10)),
                ("flow", models.DecimalField(decimal_places=0, max_digits=15)),
                ("head", models.DecimalField(decimal_places=0, max_digits=15)),
                ("eff", models.IntegerField()),
                ("npshr", models.DecimalField(decimal_places=0, max_digits=15)),
                ("kw", models.DecimalField(decimal_places=0, max_digits=15)),
                ("curve_format", models.CharField(max_length=20)),
                ("eff_rl", models.CharField(max_length=10)),
                ("eff_status", models.IntegerField()),
                ("eff_distance", models.DecimalField(decimal_places=0, max_digits=15)),
                ("tolerance", models.IntegerField()),
                ("scale_xy", models.DecimalField(decimal_places=0, max_digits=15)),
                ("update_time", models.DateTimeField()),
                ("dry_sat", models.CharField(max_length=10)),
                ("liquid", models.DecimalField(decimal_places=0, max_digits=15)),
            ],
            options={
                "db_table": "tbl_pipe_sch_lov",
            },
        ),
        migrations.CreateModel(
            name="UnitList",
            fields=[
                ("k_lov_id", models.AutoField(primary_key=True, serialize=False)),
                ("field_id", models.CharField(max_length=50)),
                ("field_value", models.CharField(max_length=50)),
            ],
            options={
                "db_table": "tbl_k_monitoring_lov",
            },
        ),
        migrations.CreateModel(
            name="VibrationDetail",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("voltage", models.CharField(blank=True, max_length=30, null=True)),
                ("acceptable", models.CharField(blank=True, max_length=10, null=True)),
                ("unsatisfied", models.CharField(blank=True, max_length=10, null=True)),
                (
                    "unacceptable",
                    models.CharField(blank=True, max_length=10, null=True),
                ),
            ],
            options={
                "db_table": "tbl_vibration_lov",
            },
        ),
        migrations.CreateModel(
            name="PumpDetail",
            fields=[
                ("pump_id", models.AutoField(primary_key=True, serialize=False)),
                ("doc_customer", models.TextField()),
                ("doc_no", models.TextField()),
                ("doc_date", models.TextField()),
                ("brand", models.TextField()),
                ("model", models.TextField()),
                ("tag_no", models.TextField()),
                ("serial_no", models.TextField()),
                ("media", models.TextField()),
                ("stage", models.IntegerField(blank=True, null=True)),
                ("location", models.TextField(blank=True, null=True)),
                ("design_temp", models.TextField()),
                ("max_temp", models.TextField()),
                ("solid_type", models.TextField(blank=True, null=True)),
                ("solid_diameter", models.TextField(blank=True, null=True)),
                ("density", models.FloatField()),
                ("viscosity", models.FloatField()),
                ("max_flow", models.IntegerField()),
                ("min_flow", models.IntegerField()),
                ("vapor_pressure", models.FloatField()),
                ("pump_speed", models.IntegerField()),
                ("design_flow", models.TextField()),
                ("design_head", models.TextField()),
                ("min_head", models.TextField()),
                ("max_head", models.TextField()),
                ("suction_velo", models.TextField()),
                ("discharge_velo", models.TextField()),
                ("bep_head", models.IntegerField()),
                ("bep_flow", models.TextField()),
                ("npshr", models.TextField()),
                ("pump_efficiency", models.TextField()),
                ("hyd_power", models.FloatField()),
                ("voltage", models.TextField()),
                ("power_required_cal", models.FloatField()),
                ("power_min_flow", models.IntegerField()),
                ("power_max_flow", models.IntegerField()),
                ("power_bep_flow", models.IntegerField()),
                ("suggest_motor", models.FloatField()),
                ("suction_pipe_size", models.TextField()),
                ("suction_pipe_rating", models.TextField(blank=True, null=True)),
                ("suction_pipe_sch", models.TextField()),
                ("discharge_pipe_size", models.TextField()),
                ("discharge_pipe_rating", models.TextField(blank=True, null=True)),
                ("discharge_pipe_sch", models.TextField()),
                ("tank_position", models.TextField(blank=True, null=True)),
                ("tank_design", models.TextField(blank=True, null=True)),
                ("tank_pressure", models.FloatField(blank=True, null=True)),
                ("suction_head", models.FloatField(blank=True, null=True)),
                ("suction_pipe_length", models.FloatField(blank=True, null=True)),
                ("discharge_pipe_length_h", models.IntegerField(blank=True, null=True)),
                ("discharge_pipe_length_v", models.IntegerField(blank=True, null=True)),
                ("suction_elbow", models.IntegerField(blank=True, null=True)),
                ("suction_tee", models.FloatField(blank=True, null=True)),
                ("suction_reducer", models.FloatField(blank=True, null=True)),
                ("suction_valve", models.FloatField(blank=True, null=True)),
                ("suction_y_strainer", models.FloatField(blank=True, null=True)),
                ("suction_other", models.FloatField(blank=True, null=True)),
                ("suction_equi_length", models.FloatField(blank=True, null=True)),
                ("discharge_equi_length", models.FloatField(blank=True, null=True)),
                ("discharge_elbow", models.IntegerField(blank=True, null=True)),
                ("discharge_tee", models.FloatField(blank=True, null=True)),
                ("discharge_reducer", models.FloatField(blank=True, null=True)),
                ("discharge_valve", models.FloatField(blank=True, null=True)),
                ("discharge_y_strainer", models.FloatField(blank=True, null=True)),
                ("discharge_other", models.FloatField(blank=True, null=True)),
                ("shaft_mat_id", models.IntegerField(blank=True, null=True)),
                ("shaft_mat", models.TextField(blank=True, null=True)),
                ("diffuser_mat_id", models.IntegerField(blank=True, null=True)),
                ("diffuser_mat", models.IntegerField(blank=True, null=True)),
                ("design_impeller_dia", models.IntegerField()),
                ("impeller_max", models.IntegerField(blank=True, null=True)),
                ("impeller_mat_id", models.IntegerField(blank=True, null=True)),
                ("impeller_mat", models.TextField(blank=True, null=True)),
                ("materials_wear_ring_id", models.IntegerField(blank=True, null=True)),
                ("materials_wear_ring", models.TextField(blank=True, null=True)),
                ("bearing_nde", models.TextField(blank=True, null=True)),
                ("bearing_num", models.TextField(blank=True, null=True)),
                ("bearing_lubric_type", models.TextField(blank=True, null=True)),
                ("bearing_lubric_brand", models.TextField(blank=True, null=True)),
                ("bearing_lubric_no", models.TextField(blank=True, null=True)),
                ("bearing_de", models.TextField(blank=True, null=True)),
                ("bearing_de_no", models.TextField(blank=True, null=True)),
                ("bearing_last_chg_dt", models.DateTimeField(blank=True, null=True)),
                ("sleeve_mat_id", models.IntegerField(blank=True, null=True)),
                ("sleeve_mat", models.TextField(blank=True, null=True)),
                ("bearing_housing_mat_id", models.IntegerField(blank=True, null=True)),
                ("bearing_housing_mat", models.TextField(blank=True, null=True)),
                ("gland_mat", models.TextField(blank=True, null=True)),
                ("casing_gas", models.TextField(blank=True, null=True)),
                ("oring_gas", models.FloatField(blank=True, null=True)),
                ("impeller_gas", models.TextField(blank=True, null=True)),
                ("pump_lining_mat", models.TextField(blank=True, null=True)),
                ("base_plate", models.TextField(blank=True, null=True)),
                ("coup_model", models.TextField(blank=True, null=True)),
                ("coup_brand", models.TextField(blank=True, null=True)),
                ("coup_type", models.TextField()),
                ("coup_size", models.TextField(blank=True, null=True)),
                ("coup_spacer", models.IntegerField(blank=True, null=True)),
                ("motor_brand", models.TextField(blank=True, null=True)),
                ("motor_model", models.TextField(blank=True, null=True)),
                ("motor_serial_no", models.TextField(blank=True, null=True)),
                ("motor_frame", models.TextField(blank=True, null=True)),
                ("motor_protection", models.TextField(blank=True, null=True)),
                ("motor_speed", models.IntegerField()),
                ("motor_rated", models.FloatField()),
                ("motor_factor", models.FloatField()),
                ("motor_connection", models.TextField(blank=True, null=True)),
                ("motor_phase", models.IntegerField()),
                ("motor_efficiency", models.TextField()),
                ("mech_main_temp", models.IntegerField(blank=True, null=True)),
                ("mech_main_pre", models.IntegerField(blank=True, null=True)),
                ("mech_seal_cham", models.TextField(blank=True, null=True)),
                ("mech_brand", models.TextField(blank=True, null=True)),
                ("mech_model", models.TextField(blank=True, null=True)),
                ("mech_size", models.IntegerField(blank=True, null=True)),
                ("mech_design", models.TextField(blank=True, null=True)),
                ("mech_material", models.TextField(blank=True, null=True)),
                ("concentration", models.IntegerField(blank=True, null=True)),
                ("pump_status", models.TextField()),
                ("timestamp", models.DateTimeField(auto_now=True)),
                (
                    "casing_mat_id",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="casing_mat",
                        to="pumps.casingmateriallist",
                    ),
                ),
                (
                    "impeller_type_id",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="impeller_type",
                        to="pumps.impellerlist",
                    ),
                ),
                (
                    "mech_api_id",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="mech_api",
                        to="pumps.mechsealapiplanlist",
                    ),
                ),
                (
                    "mech_design_id",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="mech_design",
                        to="pumps.mechanicaldesignlist",
                    ),
                ),
                (
                    "motor_drive_id",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="motor",
                        to="pumps.motordetaillist",
                    ),
                ),
                (
                    "pump_discharge_rating_id",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="pump_discharge_rating",
                        to="pumps.flangratinglist",
                    ),
                ),
                (
                    "pump_suction_rating_id",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="pump_suction_rating",
                        to="pumps.flangratinglist",
                    ),
                ),
                (
                    "rotation_de_id",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="rotation_de",
                        to="pumps.bearinglist",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "pump_type_id",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="pump_type_name",
                        to="pumps.pumpdetaillist",
                    ),
                ),
                (
                    "pump_standard_id",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="pump_standard",
                        to="pumps.pumpstandardlist",
                    ),
                ),
                (
                    "pump_discharge_size_id",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="pump_discharge_size",
                        to="pumps.suctiondischargedetaillist",
                    ),
                ),
                (
                    "pump_suction_size_id",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="pump_suction_size",
                        to="pumps.suctiondischargedetaillist",
                    ),
                ),
                (
                    "discharge_pipe_data_id",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="discharge_pipe_data",
                        to="pumps.suctionpipeinfolist",
                    ),
                ),
                (
                    "discharge_pipe_id",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="discharge_pipe_id",
                        to="pumps.suctionpipeinfolist",
                    ),
                ),
                (
                    "suction_pipe_data_id",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="suction_pipe_data",
                        to="pumps.suctionpipeinfolist",
                    ),
                ),
                (
                    "suction_pipe_id",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="suction_pipe_id",
                        to="pumps.suctionpipeinfolist",
                    ),
                ),
                (
                    "bep_flow_unit",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="bep_flow_units",
                        to="pumps.unitlist",
                    ),
                ),
                (
                    "bep_head_unit",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="bep_head_units",
                        to="pumps.unitlist",
                    ),
                ),
                (
                    "density_unit",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="density_units",
                        to="pumps.unitlist",
                    ),
                ),
                (
                    "design_flow_unit",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="design_flow_units",
                        to="pumps.unitlist",
                    ),
                ),
                (
                    "design_head_unit",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="design_head_units",
                        to="pumps.unitlist",
                    ),
                ),
                (
                    "discharge_velo_unit",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="discharge_velo_units",
                        to="pumps.unitlist",
                    ),
                ),
                (
                    "hyd_power_unit",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="hyd_power_units",
                        to="pumps.unitlist",
                    ),
                ),
                (
                    "max_flow_unit",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="max_flow_units",
                        to="pumps.unitlist",
                    ),
                ),
                (
                    "max_head_unit",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="max_head_units",
                        to="pumps.unitlist",
                    ),
                ),
                (
                    "mech_size_unit",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="mech_size_units",
                        to="pumps.unitlist",
                    ),
                ),
                (
                    "min_flow_unit",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="min_flow_units",
                        to="pumps.unitlist",
                    ),
                ),
                (
                    "min_head_unit",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="min_head_units",
                        to="pumps.unitlist",
                    ),
                ),
                (
                    "motor_efficiency_unit",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="motor_efficiency_units",
                        to="pumps.unitlist",
                    ),
                ),
                (
                    "motor_rated_unit",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="motor_rated_units",
                        to="pumps.unitlist",
                    ),
                ),
                (
                    "motor_speed_unit",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="motor_speed_units",
                        to="pumps.unitlist",
                    ),
                ),
                (
                    "npshr_unit",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="npshr_units",
                        to="pumps.unitlist",
                    ),
                ),
                (
                    "power_bep_flow_unit",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="power_bep_flow_units",
                        to="pumps.unitlist",
                    ),
                ),
                (
                    "power_max_flow_unit",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="power_max_flow_units",
                        to="pumps.unitlist",
                    ),
                ),
                (
                    "power_min_flow_unit",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="power_min_flow_units",
                        to="pumps.unitlist",
                    ),
                ),
                (
                    "power_required_cal_unit",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="power_required_cal_units",
                        to="pumps.unitlist",
                    ),
                ),
                (
                    "pump_efficiency_unit",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="pump_efficiency_units",
                        to="pumps.unitlist",
                    ),
                ),
                (
                    "pump_speed_unit",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="pump_speed_units",
                        to="pumps.unitlist",
                    ),
                ),
                (
                    "suction_velo_unit",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="suction_velo_units",
                        to="pumps.unitlist",
                    ),
                ),
                (
                    "vapor_pressure_unit",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="vapor_pressure_units",
                        to="pumps.unitlist",
                    ),
                ),
                (
                    "viscosity_unit",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="viscosity_units",
                        to="pumps.unitlist",
                    ),
                ),
                (
                    "voltage_unit",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="voltage_units",
                        to="pumps.unitlist",
                    ),
                ),
            ],
            options={
                "db_table": "tbl_pump_detail",
            },
        ),
        migrations.CreateModel(
            name="EngineeringDetail",
            fields=[
                ("id", models.AutoField(primary_key=True, serialize=False)),
                ("check_id", models.IntegerField()),
                ("doc_customer", models.CharField(max_length=50)),
                ("doc_no", models.CharField(max_length=50)),
                ("doc_number_engineer", models.CharField(max_length=100)),
                ("test_speed", models.FloatField()),
                ("test_speed_unit", models.TextField()),
                ("flow_ope", models.FloatField()),
                ("flow_ope_unit", models.TextField()),
                ("suction_pres_ope", models.FloatField()),
                ("suction_pres_ope_unit", models.TextField()),
                ("discharge_pres_ope", models.FloatField()),
                ("discharge_pres_ope_unit", models.TextField()),
                ("diff_pres_ope", models.FloatField()),
                ("diff_pres_ope_unit", models.TextField()),
                ("current_i1_ope", models.FloatField()),
                ("current_i1_ope_unit", models.TextField()),
                ("current_i2_ope", models.FloatField()),
                ("current_i2_ope_unit", models.TextField()),
                ("current_i3_ope", models.FloatField()),
                ("current_i3_ope_unit", models.TextField()),
                ("i_avg_ope", models.FloatField()),
                ("i_avg_ope_unit", models.TextField()),
                ("v_avg_ope", models.FloatField()),
                ("v_avg_ope_unit", models.TextField()),
                ("motor_shaft_ope", models.FloatField()),
                ("motor_shaft_ope_unit", models.TextField()),
                ("head_ope", models.FloatField()),
                ("head_ope_unit", models.TextField()),
                ("head_shut", models.FloatField()),
                ("head_shut_unit", models.TextField()),
                ("head_max", models.FloatField()),
                ("head_max_unit", models.TextField()),
                ("v_pump_de_h", models.FloatField()),
                ("v_pump_de_h_unit", models.TextField()),
                ("v_pump_de_v", models.FloatField()),
                ("v_pump_de_v_unit", models.TextField()),
                ("v_pump_de_a", models.FloatField()),
                ("v_pump_de_a_unit", models.TextField()),
                ("v_pump_nde_h", models.FloatField()),
                ("v_pump_nde_h_unit", models.TextField()),
                ("v_pump_nde_v", models.FloatField()),
                ("v_pump_nde_v_unit", models.TextField()),
                ("v_pump_nde_a", models.FloatField()),
                ("v_pump_nde_a_unit", models.TextField()),
                ("v_motor_de_h", models.FloatField()),
                ("v_motor_de_h_unit", models.TextField()),
                ("v_motor_de_v", models.FloatField()),
                ("v_motor_de_v_unit", models.TextField()),
                ("v_motor_de_a", models.FloatField()),
                ("v_motor_de_a_unit", models.TextField()),
                ("v_motor_nde_h", models.FloatField()),
                ("v_motor_nde_h_unit", models.TextField()),
                ("v_motor_nde_v", models.FloatField()),
                ("v_motor_nde_v_unit", models.TextField()),
                ("v_motor_nde_a", models.FloatField()),
                ("v_motor_nde_a_unit", models.TextField()),
                ("a_pump_de_h", models.FloatField()),
                ("a_pump_de_h_unit", models.TextField()),
                ("a_pump_de_v", models.FloatField()),
                ("a_pump_de_v_unit", models.TextField()),
                ("a_pump_de_a", models.FloatField()),
                ("a_pump_de_a_unit", models.TextField()),
                ("a_pump_nde_h", models.FloatField()),
                ("a_pump_nde_h_unit", models.TextField()),
                ("a_pump_nde_v", models.FloatField()),
                ("a_pump_nde_v_unit", models.TextField()),
                ("a_pump_nde_a", models.FloatField()),
                ("a_pump_nde_a_unit", models.TextField()),
                ("a_motor_de_h", models.FloatField()),
                ("a_motor_de_h_unit", models.TextField()),
                ("a_motor_de_v", models.FloatField()),
                ("a_motor_de_v_unit", models.TextField()),
                ("a_motor_de_a", models.FloatField()),
                ("a_motor_de_a_unit", models.TextField()),
                ("a_motor_nde_h", models.FloatField()),
                ("a_motor_nde_h_unit", models.TextField()),
                ("a_motor_nde_v", models.FloatField()),
                ("a_motor_nde_v_unit", models.TextField()),
                ("a_motor_nde_a", models.FloatField()),
                ("a_motor_nde_a_unit", models.TextField()),
                ("temp_pump_nde", models.FloatField()),
                ("temp_pump_nde_unit", models.TextField()),
                ("temp_pump_de", models.FloatField()),
                ("temp_motor_nde", models.FloatField()),
                ("temp_motor_de", models.FloatField()),
                ("env_vibration", models.TextField()),
                ("env_vibration_unit", models.TextField(blank=True, null=True)),
                ("env_temp", models.FloatField()),
                ("liquid_temp", models.FloatField()),
                ("npsha", models.FloatField(blank=True, null=True)),
                ("npsha_unit", models.TextField()),
                ("suction_fluid_velo", models.FloatField()),
                ("suction_fluid_velo_unit", models.TextField()),
                ("discharge_fluid_velo", models.FloatField()),
                ("discharge_fluid_velo_unit", models.TextField()),
                ("remarks", models.TextField(blank=True, null=True)),
                ("alignment_check", models.BooleanField(default=False)),
                ("coupling_check", models.BooleanField(default=False)),
                ("suction_valve_check", models.BooleanField(default=False)),
                ("painting_check", models.BooleanField(default=False)),
                ("rotate_hand_check", models.BooleanField(default=False)),
                ("axial_hand_check", models.BooleanField(default=False)),
                ("gap_check", models.BooleanField(default=False)),
                ("discharge_valve_check", models.BooleanField(default=False)),
                ("bolt_check", models.BooleanField(default=False)),
                ("oil_grease_check", models.BooleanField(default=False)),
                ("electricity_check", models.BooleanField(default=False)),
                ("service_check", models.BooleanField(default=False)),
                ("leakage_check", models.BooleanField(default=False)),
                ("corrosion_check", models.BooleanField(default=False)),
                ("noise_check", models.BooleanField(default=False)),
                ("noise_run_check", models.BooleanField(default=False)),
                ("oil_grease_run_check", models.BooleanField(default=False)),
                ("leakage_run_check", models.BooleanField(default=False)),
                ("mechanical_run_check", models.BooleanField(default=False)),
                ("cavitation_run_check", models.BooleanField(default=False)),
                ("corrosion_run_check", models.BooleanField(default=False)),
                ("suction_valve_run_check", models.BooleanField(default=False)),
                ("discharge_valve_run_check", models.BooleanField(default=False)),
                ("painting_run_check", models.BooleanField(default=False)),
                ("electric_connectivity_run_check", models.BooleanField(default=False)),
                ("service_piping_run_check", models.BooleanField(default=False)),
                ("bolt_nut_run_check", models.BooleanField(default=False)),
                ("barrier_fluid_run_pres_check", models.BooleanField(default=False)),
                ("alignment_remark", models.TextField(blank=True, null=True)),
                ("coupling_remark", models.TextField(blank=True, null=True)),
                ("suction_valve_remark", models.TextField(blank=True, null=True)),
                ("painting_remark", models.TextField(blank=True, null=True)),
                ("rotating_remark", models.TextField(blank=True, null=True)),
                ("axial_hand_remark", models.TextField(blank=True, null=True)),
                ("gap_remark", models.TextField(blank=True, null=True)),
                ("discharge_valve_remark", models.TextField(blank=True, null=True)),
                ("bolt_remark", models.TextField(blank=True, null=True)),
                ("oil_remark", models.TextField(blank=True, null=True)),
                ("electricity_remark", models.TextField(blank=True, null=True)),
                ("service_remark", models.TextField(blank=True, null=True)),
                ("leakage_remark", models.TextField(blank=True, null=True)),
                ("corrosion_remark", models.TextField(blank=True, null=True)),
                ("noise_remark", models.TextField(blank=True, null=True)),
                ("noise_run_remark", models.TextField(blank=True, null=True)),
                ("oil_run_remark", models.TextField(blank=True, null=True)),
                ("leakage_run_remark", models.TextField(blank=True, null=True)),
                ("mechanical_run_remark", models.TextField(blank=True, null=True)),
                ("cavitation_run_remark", models.TextField(blank=True, null=True)),
                ("corrosion_run_remark", models.TextField(blank=True, null=True)),
                ("suction_valve_run_remark", models.TextField(blank=True, null=True)),
                ("discharge_valve_run_remark", models.TextField(blank=True, null=True)),
                ("painting_run_remark", models.TextField(blank=True, null=True)),
                (
                    "electric_connectivity_run_remark",
                    models.TextField(blank=True, null=True),
                ),
                ("service_piping_run_remark", models.TextField(blank=True, null=True)),
                ("bolt_nut_run_remark", models.TextField(blank=True, null=True)),
                (
                    "barrier_fluid_run_pres_remark",
                    models.TextField(blank=True, null=True),
                ),
                ("speed_suggest", models.TextField(blank=True, null=True)),
                ("flow_suggest", models.TextField(blank=True, null=True)),
                ("npshr_suggest", models.TextField(blank=True, null=True)),
                ("velocity_suggest", models.TextField(blank=True, null=True)),
                ("boiling_point_suggest", models.TextField(blank=True, null=True)),
                ("current_suggest", models.TextField(blank=True, null=True)),
                ("power_suggest", models.TextField(blank=True, null=True)),
                ("api_suggest", models.TextField(blank=True, null=True)),
                ("buffer_suggest", models.TextField(blank=True, null=True)),
                ("bearing_suggest", models.TextField(blank=True, null=True)),
                ("vibration_suggest", models.TextField(blank=True, null=True)),
                ("bearing_temp_suggest", models.TextField(blank=True, null=True)),
                ("timestamp", models.DateTimeField()),
                (
                    "pump_id",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="pumps.pumpdetail",
                    ),
                ),
            ],
            options={
                "db_table": "tbl_engineering_check",
            },
        ),
    ]
